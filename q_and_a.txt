Hackbright Engineering

Unit 1 Study Guide
https://fellowship.hackbrightacademy.com/materials/wmt5/homework/study-guide-1/#functions-questions

$ hbget study-guide-1 --homework

Critical Topics from This Unit

    What is an algorithm? Provide some examples, both in the context in of computer science and beyond.

    What is a heuristic? How do they relate to algorithms?

    What is the brute force method? What are some problems with it?

    What is version control? How is it different than simply saving a file?

    What’s the difference between Git and Github?

    Git commands to know:

        git log

        git init

        git status

        git add

        git commit with -a and -m

        git remote add

        git remote -v

        git push

    What does the file .gitignore do? What is the content of the .gitignore file?

    What are some files that git should generally ignore?

    How can you tell whether a file is being ignored by git or not?

    If you git add a secret file, is it possible to remove that file from the history of git?

    Why is using the command line important?

    What is the prompt in the context of the command line?

    Shell commands to know:

        ls

        pwd

        cp

        mv

        cd

        mkdir

        rm

        man

        any command with --help

        CTRL-D and CTRL-C

    What’s the difference between relative and absolute paths?

    What’s the difference between parameters and arguments?

    What’s the difference between return, break, and print?

    What does a function return if it doesn’t have a return statement?

    What is a default parameter?

    What is scope? What is function scope?

    What are some important Python style considerations for writing functions?

    Python list methods/functions to know:

        sorted()

        .sort()

        .append()

        .extend()

        How to index a list

        How to slice a list

        How to loop over a list

            Using range(len(some_list))

            Using a counter and indexing the list

            Without using either of the above (just a for-loop)

    What is mutability?

    How is Python memory different than C memory? How are Python variables different than “classic” variables?

    What is garbage collection?

    What is the id function? What does the comparator is do in Python?

    What are sets good for?

    Set methods to know:

        .add()

        len()

        .remove()

        How to create a set

        How to check if something is in a set

    What are tuples good for?

        How do you create a tuple?

        How to index a tuple

Practice Coding Questions

The goal here is for you to see where you’re at, review what you remember, and practice the new skills you’ve gained in the last week.
Docstrings and Doctests

Inside the docstrings are “doctests,” which are runnable code samples from the standard Python interpreter shell that serve as tests for whether the function is working as expected.

A documentation string is the part of the function that explains how the function should work. Documentation strings are found on the first line of the body of the function, right after the function name and parameters are stated.

As their name suggests, doctests are tests for a function found in that function’s documentation strings. Doctests are formatted just like you’d see in the Python interpreter. For example, a doctest that aims to test a function called all_odd would look like this:

>>> all_odd([1, 2, 7, -5])
[1, 7, -5]

In our case, these little code examples within documentation strings are actually run, or evaluated, whenever you run practice.py. If the function does not behave as its doctests state that it should, those doctests are said to have “failed.” Thus, the output that you see when you run practice.py provides information about each failure, if there are any.

Doctests are one of many ways that a programmer can test their Python code. Doctests are especially nice because they are easy to generate; they don’t require the creation of additional files or functions outside of the very function you want to test.
List Questions

The file lists.py contains many functions that are not complete, but that have names and docstrings to explain how each function should work.

Fill in the functions in lists.py so that each function does what its documentation string says it should do.

Begin by running the file from the command line. You’ll see a lot of output, followed by a failure report similar to the one below.

$ python3 lists.py

16 items had failures:
 2 of   2 in __main__.average
 3 of   5 in __main__.duplicates
 2 of   2 in __main__.find_letter_indices
 2 of   2 in __main__.halvesies
 ...
***Test Failed*** 37 failures.

As you finish the functions, the output from running this command will decrease. Note that the output is alphabetical, not the order that the functions appear. When you have completed this part of the study guide, the only output from this program should be:

$ python3 lists.py

ALL TESTS PASSED. GOOD WORK!

Functions Questions

Start working in functions.py, where it says Part One and Part Two. Here you will find prompts for what parameters (if any) your function should take and what it should return. (Note: when the function is just printing and not explicitly returning, a return value of None is implied.)

Fill in the functions in functions.py so that each function does what its documentation string says it should do.

Begin by typing the following into the command line:

$ python3 functions.py

You’ll see a lot of output, followed by a failure report for all of the tests that ran and did not pass.

As you finish the functions, the output from running this file will decrease. Note that the output of the test failure report is alphabetical, not the order that the functions appear in the python file. When you’ve finished the study guide, the only output from this program should be:

$ python3 functions.py

ALL TESTS PASSED. GOOD WORK!

Solution

Check the solution here

© 2022 Hackbright Academy
