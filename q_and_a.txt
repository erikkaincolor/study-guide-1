Hackbright Engineering

Unit 1 Study Guide
https://fellowship.hackbrightacademy.com/materials/wmt5/homework/study-guide-1/#functions-questions

Critical Topics from This Unit

What is an algorithm? Provide some examples, both in the context in of computer science and beyond.
    An algortithim is a set of instructions that solves some problem. Algorithims are most commonly known by th epublic to be implemented in social media

What is a heuristic? How do they relate to algorithms?
    A hueristic is algorithim but it doesnt solve every single instance. Almost like a band-aid.

What is the brute force method? What are some problems with it?
    Explicitly coding something and every possible way via exhaustion. Simple but slow.

What is version control? How is it different than simply saving a file?
    Version control is neatly sorting though all changes in repository or set of scripts/programs/functions. It tracks changes and allows for streamlined collaboration between teams,
    
What‚Äôs the difference between Git and Github?
    Git is local to your machine. Troublesome to use if you use multiple machines for work.projects. Github is on the clous and can be accessedfrom anywhere by whoever you want.

    Git commands to know:

        git log ---------------------------------> shows all changes to files 

        git init ---------------------------------> initializes empty local git repo/remote

        git status -------------------------------> shows files staged for commits or not AND what files were modified and if theyre tracked(added) or not by color (red/green)

        git add ---------------------------------> tracks files, aka stages them, can use (. switch) at end. i.e. git add . to add all

        git commit with -a and -m ----------------> commit (-a switch) all tracked files to remote repo, with a message (-m switch), i.e. git ocmmit -am "init commit status.py"

        git remote add ---------------------------> takes in two arguments: 1. The name you want to use to refer to your remote (origin is the name most folks use by default) but. THIS allows you to connect your local repo with multiple remote repos. 2. The remote‚Äôs address

        git remote -v ----------------------------> outputs remote names (fetch/push) to terminal 

        git push ---------------------------------> pushes saved changes to remote repo , MUST include destination
           
        git clone ---------------------------------> in desired directory, paste clone URL afterthis in terminal, 




What does the file .gitignore do? What is the content of the .gitignore file?
    a file where you paste files you want to ignore, esp when merging

What are some files that git should generally ignore?
    top secret files! Notes you don‚Äôt want others to see, Python virtual environment directory, Python .pyc files, Any crufty files your editor or operating system makes
    
How can you tell whether a file is being ignored by git or not?
    you wont see it...you can run "ls -a" to see hidden files

If you git add a secret file, is it possible to remove that file from the history of git?
    never :(
    
Why is using the command line important?
    its industry standard, its faster to get things done
 
What is the prompt in the context of the command line?
    >>> this thing right here elicits an action

    Shell commands to know:

        ls ---------------------------------> list files in directory

        pwd ---------------------------------> show me what directory im in, even thoughitsin the address bar of terminal

        cp ---------------------------------> copy a file

        mv ---------------------------------> move

        cd ---------------------------------> change direcotry

        mkdir ---------------------------------> make directory

        rm ---------------------------------> remove file/delete

        man ---------------------------------> Show the help manual of the command

        any command with --help --------------> [command] -h 	Get help about a command

        CTRL-D and CTRL-C ------------------->exit shell....kill whats running

What‚Äôs the difference between relative and absolute paths?
    relative is in relation to....so one above....absolute is complete path from root

What‚Äôs the difference between parameters and arguments?
    parameters go in function definitions and arguments go in function calls!

What‚Äôs the difference between return, break, and print?
    return is the computation...the result of the function...break stops a loop, print is the output of the function

What does a function return if it doesn‚Äôt have a return statement?
    None
    
What is a default parameter?
    in "def make_egg(ingredients, butter=1", the def parameter is butter....it can be pre-assignd, used not used and reassigned at the call

What is scope? What is function scope?
    where a var is relative to function

What are some important Python style considerations for writing functions?
    function name being an action...doc strings...example code...comments...simple...does 1 thing
    
    Python list methods/functions to know:

        sorted() ---------------------------------> sorts in alpha order, built in python function that can b used on mutable data structures

        .sort() ---------------------------------> sorts lists alpha orderor num order

        .append() ---------------------------------> tacks on to end of list

        .extend() ---------------------------------> adds lists to end of another list

        How to index a list ------------------------> list[0], <---by first item, list["animal"] <---by value

        How to slice a list -----------------------------> list[1:1:-1] many ways, start/stop/step, forward or backward

        How to loop over a list :

            Using range(len(some_list)) ------------------------> for loop by length and start/stop

            Using a counter and indexing the list ------------------------> for loop by index, or enumerate, counters, if-statements if needed

            Without using either of the above (just a for-loop) --------> ????

What is mutability?
    the ability to iterate through and through a data structure. can do it to some but not all

How is Python memory different than C memory? How are Python variables different than ‚Äúclassic‚Äù variables?
    ????? first in first out the stack.

What is garbage collection?
    ????????

What is the id function? What does the comparator is do in Python?
    ?????/

What are sets good for?
  Mutable, iterable, unordered, Unique collection of items,Fast look-up (reason mysterious for now üò≠)

    Set methods to know:

        .add("") --------------------------------->  moods.add('grumpy') ------> Notice, it‚Äôs add not append, since sets are unordered

        len(tuple) ---------------------------------> get length..doesnt count duplicates

        .remove()---------------------------------> delete

        How to create a set ---------------------------------> hey = ["hi", "bye"], hey = set(hey)

        How to check if something is in a set ----------------> ????????

    What are (tuples) good for? ------------------------->things you dont want to change, meaningful data

        How do you create a tuple? ------------------------> tuple = ("hi", "bye")

        How to index a tuple -------------------------------> tuple[0]

Practice Coding Questions

The goal here is for you to see where you‚Äôre at, review what you remember, and practice the new skills you‚Äôve gained in the last week.
Docstrings and Doctests

Inside the docstrings are ‚Äúdoctests,‚Äù which are runnable code samples from the standard Python interpreter shell that serve as tests for whether the function is working as expected.

A documentation string is the part of the function that explains how the function should work. Documentation strings are found on the first line of the body of the function, right after the function name and parameters are stated.

As their name suggests, doctests are tests for a function found in that function‚Äôs documentation strings. Doctests are formatted just like you‚Äôd see in the Python interpreter. For example, a doctest that aims to test a function called all_odd would look like this:

>>> all_odd([1, 2, 7, -5])
[1, 7, -5]

In our case, these little code examples within documentation strings are actually run, or evaluated, whenever you run practice.py. If the function does not behave as its doctests state that it should, those doctests are said to have ‚Äúfailed.‚Äù Thus, the output that you see when you run practice.py provides information about each failure, if there are any.

Doctests are one of many ways that a programmer can test their Python code. Doctests are especially nice because they are easy to generate; they don‚Äôt require the creation of additional files or functions outside of the very function you want to test.
List Questions

The file lists.py contains many functions that are not complete, but that have names and docstrings to explain how each function should work.

Fill in the functions in lists.py so that each function does what its documentation string says it should do.

Begin by running the file from the command line. You‚Äôll see a lot of output, followed by a failure report similar to the one below.

$ python3 lists.py

16 items had failures:
 2 of   2 in __main__.average
 3 of   5 in __main__.duplicates
 2 of   2 in __main__.find_letter_indices
 2 of   2 in __main__.halvesies
 ...
***Test Failed*** 37 failures.

As you finish the functions, the output from running this command will decrease. Note that the output is alphabetical, not the order that the functions appear. When you have completed this part of the study guide, the only output from this program should be:

$ python3 lists.py

ALL TESTS PASSED. GOOD WORK!

Functions Questions

Start working in functions.py, where it says Part One and Part Two. Here you will find prompts for what parameters (if any) your function should take and what it should return. (Note: when the function is just printing and not explicitly returning, a return value of None is implied.)

Fill in the functions in functions.py so that each function does what its documentation string says it should do.

Begin by typing the following into the command line:

$ python3 functions.py

You‚Äôll see a lot of output, followed by a failure report for all of the tests that ran and did not pass.

As you finish the functions, the output from running this file will decrease. Note that the output of the test failure report is alphabetical, not the order that the functions appear in the python file. When you‚Äôve finished the study guide, the only output from this program should be:

$ python3 functions.py

ALL TESTS PASSED. GOOD WORK!

Solution

Check the solution here
